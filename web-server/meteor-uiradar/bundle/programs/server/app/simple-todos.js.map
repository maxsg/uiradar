{"version":3,"sources":["meteor://ðŸ’»app/simple-todos.js"],"names":[],"mappings":"yfile":"/simple-todos.js","sourcesContent":["Devices = new Mongo.Collection(\"devices\");\n\nTrajectories = new Mongo.Collection(\"trajectories\");\n\nif (Meteor.isServer) {\n\n\tMeteor.publish(\"trajectories\", function() {\n\t\treturn Trajectories.find();\n\t})\n\t\n}\n\nif (Meteor.isClient) {\n\tMeteor.subscribe(\"trajectories\");\n\n\tTemplate.body.helpers({\n\t\ttrajectories: function() {\n\t\t\treturn Trajectories.find({device_id: 100}, {sort: {timestamp: -1}});\n\t\t},\n\t\ttrajectoryCount: function() {\n\t\t\treturn Trajectories.find({device_id: 100}).count();\n\t\t},\n\t\tdeviceId: function() {\n\t\t\treturn 100;\n\t\t}\n\t});\n\n\n\tTemplate.xytrajectoryPlot.rendered = function(){\n\t\t//Width and height\n\t\tvar w = 600;\n\t\tvar h = 400;\n\t\tvar padding = 30;\n\t\t\n\t\t//Create scale functions\n\t\tvar xScale = d3.scale.linear()\n\t\t\t\t\t\t\t .range([padding, w - padding * 2]);\n\n\t\tvar yScale = d3.scale.linear()\n\t\t\t\t\t\t\t .range([h - padding, padding]);\n\n\t\t//Define X axis\n\t\tvar xAxis = d3.svg.axis()\n\t\t\t\t\t\t.scale(xScale)\n\t\t\t\t\t\t.orient(\"bottom\")\n\t\t\t\t\t\t.ticks(10);\n\n\t\t//Define Y axis\n\t\tvar yAxis = d3.svg.axis()\n\t\t\t\t\t\t.scale(yScale)\n\t\t\t\t\t\t.orient(\"left\")\n\t\t\t\t\t\t.ticks(10);\n\n\t\t//Create SVG element\n\t\tvar svg = d3.select(\"#xytrajectoryPlot\")\n\t\t\t\t\t.attr(\"width\", w)\n\t\t\t\t\t.attr(\"height\", h);\n\n\t\t//Define key function, to be used when binding data\n\t\tvar key = function(d) {\n\t\t\treturn d.timestamp;\n\t\t};\n\n\t\t//Create X axis\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n\t\t\t.attr(\"line-width\", 10);\n\t\t\n\t\t//Create Y axis\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\t\t\t.attr(\"transform\", \"translate(\" + padding + \",0)\");\n\n\t\tDeps.autorun(function(){\n\t\t\tvar dataset = Trajectories.find({device_id: 100}, {sort:{timestamp:-1}}).fetch();\n\t\t\t// var dataset = Trajectories.find({device_id: 100}).fetch();\n\t\t\t\n\t\t\t//Update scale domains\n\t\t\t// xScale.domain([0, d3.max(dataset, function(d) { return d.x; })]);\n\t\t\t// yScale.domain([0, d3.max(dataset, function(d) { return d.y; })]);\n\t\t\txScale.domain([-5, 5]);\n\t\t\tyScale.domain([0, 10]);\n\n\t\t\t//Update X axis\n\t\t\tsvg.select(\".x.axis\")\n\t\t\t\t.transition()\n\t\t\t\t.duration(1000)\n\t\t\t\t.call(xAxis);\n\t\t\t\n\t\t\t//Update Y axis\n\t\t\tsvg.select(\".y.axis\")\n\t\t\t\t.transition()\n\t\t\t\t.duration(1000)\n\t\t\t\t.call(yAxis);\n\t\t\t\n\n\t\t\tvar circles = svg\n\t\t\t\t.selectAll(\"circle\")\n\t\t\t\t.data(dataset, key);\n\n\t\t\t//Create\n\t\t\tcircles\n\t\t\t\t.enter()\n\t\t\t\t.append(\"circle\")\n\t\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\t\treturn xScale(d.x);\n\t\t\t\t})\n\t\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\t\treturn yScale(d.y);\n\t\t\t\t})\n\t\t\t\t.attr(\"x\", function(d) { return d.x })\n\t\t\t\t.attr(\"y\", function(d) { return d.y })\n\t\t\t\t.attr(\"r\", 3)\n\t\t\t\t.attr(\"fill\", \"rgb(0,0,220)\")\n\t\t\t\t.attr(\"timestamp\", function(d) { return d.timestamp });\n\n\t\t\t// Update\n\t\t\tcircles\n\t\t\t\t.transition()\n\t\t\t\t.duration(1000)\n\t\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\t\treturn xScale(d.x);\n\t\t\t\t})\n\t\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\t\treturn yScale(d.y);\n\t\t\t\t});\n\n\t\t\t//Remove\n\t\t\tcircles\n\t\t\t\t.exit()\n\t\t\t\t.remove();\n\t\t});\n};\n\n\n// Template.ztrajectoryPlot.rendered = function(){\n// \t\t//Width and height\n// \t\tvar w = 600;\n// \t\tvar h = 400;\n// \t\tvar padding = 30;\n\t\t\n// \t\t//Create scale functions\n// \t\tvar xScale = d3.scale.linear()\n// \t\t\t\t\t\t\t .range([padding, w - padding * 2]);\n\n// \t\tvar yScale = d3.scale.linear()\n// \t\t\t\t\t\t\t .range([h - padding, padding]);\n\n// \t\t//Define X axis\n// \t\tvar xAxis = d3.svg.axis()\n// \t\t\t\t\t\t.scale(xScale)\n// \t\t\t\t\t\t.orient(\"bottom\")\n// \t\t\t\t\t\t.ticks(10);\n\n// \t\t//Define Y axis\n// \t\tvar yAxis = d3.svg.axis()\n// \t\t\t\t\t\t.scale(yScale)\n// \t\t\t\t\t\t.orient(\"left\")\n// \t\t\t\t\t\t.ticks(10);\n\n// \t\t//Create SVG element\n// \t\tvar svg = d3.select(\"#ztrajectoryPlot\")\n// \t\t\t\t\t.attr(\"width\", w)\n// \t\t\t\t\t.attr(\"height\", h);\n\n// \t\t//Define key function, to be used when binding data\n// \t\tvar key = function(d) {\n// \t\t\treturn d.timestamp;\n// \t\t};\n\n// \t\t//Create X axis\n// \t\tsvg.append(\"g\")\n// \t\t\t.attr(\"class\", \"x axis\")\n// \t\t\t.attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n// \t\t\t.attr(\"line-width\", 10);\n\t\t\n// \t\t//Create Y axis\n// \t\tsvg.append(\"g\")\n// \t\t\t.attr(\"class\", \"y axis\")\n// \t\t\t.attr(\"transform\", \"translate(\" + padding + \",0)\");\n\n// \t\tDeps.autorun(function(){\n// \t\t\tvar dataset = Trajectories.find({device_id: 100}, {sort:{timestamp:-1}}).fetch();\n// \t\t\t// var dataset = Trajectories.find({device_id: 100}).fetch();\n\t\t\t\n// \t\t\t//Update scale domains\n// \t\t\t// xScale.domain([0, d3.max(dataset, function(d) { return d.x; })]);\n// \t\t\t// yScale.domain([0, d3.max(dataset, function(d) { return d.y; })]);\n// \t\t\txScale.domain([-5, 5]);\n// \t\t\tyScale.domain([0, 10]);\n\n// \t\t\t//Update X axis\n// \t\t\tsvg.select(\".x.axis\")\n// \t\t\t\t.transition()\n// \t\t\t\t.duration(1000)\n// \t\t\t\t.call(xAxis);\n\t\t\t\n// \t\t\t//Update Y axis\n// \t\t\tsvg.select(\".y.axis\")\n// \t\t\t\t.transition()\n// \t\t\t\t.duration(1000)\n// \t\t\t\t.call(yAxis);\n\t\t\t\n\n// \t\t\tvar circles = svg\n// \t\t\t\t.selectAll(\"circle\")\n// \t\t\t\t.data(dataset, key);\n\n// \t\t\t//Create\n// \t\t\tcircles\n// \t\t\t\t.enter()\n// \t\t\t\t.append(\"circle\")\n// \t\t\t\t.attr(\"cx\", function(d) {\n// \t\t\t\t\treturn xScale(d.x);\n// \t\t\t\t})\n// \t\t\t\t.attr(\"cy\", function(d) {\n// \t\t\t\t\treturn yScale(d.y);\n// \t\t\t\t})\n// \t\t\t\t.attr(\"x\", function(d) { return d.x })\n// \t\t\t\t.attr(\"y\", function(d) { return d.y })\n// \t\t\t\t.attr(\"r\", 3)\n// \t\t\t\t.attr(\"fill\", \"rgb(0,0,220)\")\n// \t\t\t\t.attr(\"timestamp\", function(d) { return d.timestamp });\n\n// \t\t\t// Update\n// \t\t\tcircles\n// \t\t\t\t.transition()\n// \t\t\t\t.duration(1000)\n// \t\t\t\t.attr(\"cx\", function(d) {\n// \t\t\t\t\treturn xScale(d.x);\n// \t\t\t\t})\n// \t\t\t\t.attr(\"cy\", function(d) {\n// \t\t\t\t\treturn yScale(d.y);\n// \t\t\t\t});\n\n// \t\t\t//Remove\n// \t\t\tcircles\n// \t\t\t\t.exit()\n// \t\t\t\t.remove();\n// \t\t});\n// };\n\n\n\n\n\tTemplate.ztrajectoryPlot.rendered = function() {\n\t//Width and height\n\tvar margin = {top: 20, right: 20, bottom: 30, left: 50},\n\t\twidth = 600 - margin.left - margin.right,\n\t\theight = 400 - margin.top - margin.bottom;\n\n\tvar x = d3.time.scale()\n\t\t.range([0, width]);\n\n\tvar y = d3.scale.linear()\n\t\t.range([height, 0]);\n\n\tvar xAxis = d3.svg.axis()\n\t\t.scale(x)\n\t\t.orient(\"bottom\");\n\n\tvar yAxis = d3.svg.axis()\n\t\t.scale(y)\n\t\t.orient(\"left\");\n\n\tvar line = d3.svg.line()\n\t\t.x(function(d) {\n\t\t\treturn x(d.timestamp);\n\t\t})\n\t\t.y(function(d) {\n\t\t\treturn y(d.z);\n\t\t});\n\n\tvar svg = d3.select(\"#ztrajectoryPlot\")\n\t\t.attr(\"width\", width + margin.left + margin.right)\n\t\t.attr(\"height\", height + margin.top + margin.bottom)\n\t\t.append(\"g\")\n\t\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\tsvg.append(\"g\")\n\t\t.attr(\"class\", \"x axis\")\n\t\t.attr(\"transform\", \"translate(0,\" + height + \")\");\n\n\tsvg.append(\"g\")\n\t\t.attr(\"class\", \"y axis\")\n\t\t.append(\"text\")\n\t\t.attr(\"transform\", \"rotate(-90)\")\n\t\t.attr(\"y\", 6)\n\t\t.attr(\"dy\", \".71em\")\n\t\t.style(\"text-anchor\", \"end\")\n\t\t.text(\"elevation-value\");\n\n\tDeps.autorun(function(){\n\t\tvar dataset = Trajectories.find({device_id: 100},{sort:{timestamp:-1}}).fetch();\n\n\t\tvar paths = svg.selectAll(\"path.line\")\n\t\t\t.data([dataset]); //todo - odd syntax here - should use a key function, but can't seem to get that working\n\n\t\tx.domain(d3.extent(dataset, function(d) { return d.timestamp; }));\n\t\ty.domain(d3.extent(dataset, function(d) { return d.z; }));\n\n\t\t//Update X axis\n\t\tsvg.select(\".x.axis\")\n\t\t\t.transition()\n\t\t\t.duration(1000)\n\t\t\t.call(xAxis);\n\t\t\t\n\t\t//Update Y axis\n\t\tsvg.select(\".y.axis\")\n\t\t\t.transition()\n\t\t\t.duration(1000)\n\t\t\t.call(yAxis);\n\t\t\n\t\tpaths\n\t\t\t.enter()\n\t\t\t.append(\"path\")\n\t\t\t.attr(\"class\", \"line\")\n\t\t\t.attr('d', line);\n\n\t\tpaths\n\t\t\t.attr('d', line); //todo - should be a transisition, but removed it due to absence of key\n\t\t\t\n\t\tpaths\n\t\t\t.exit()\n\t\t\t.remove();\n\t});\n};\n\n\n}\n"]}